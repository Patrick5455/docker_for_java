command to deploy a volume from localhost to contianer path:

IN: sudo docker run -d --name webapp -p 8080:8080 -v `pwd`/webapp.war:/opt/jboss/wildfly/standalone/deployments/webapp.war/ jboss/wildfly
out: 6b9d35e1ea275605c248cb61237513271f04c064a423d164969badd6e23a1cf1

Confirm the artifact has been deployed to the container in the specified port. So we run/visit the url in the browser

IN: curl http://localhost:8080/webapp/resources/persons

OUT:
<?xml version="1.0" encoding="UTF-8" standalone="yes"?><collection><person><name>Penny</name></person><person><name>Leonard</name></person><person><name>Sheldon</name></person><person><name>Amy</name></person><person><name>Howard</name></person><person><name>Bernadette</name></person><person><name>Raj</name></person><person><name>Priya</name></person></collection>patrick@patrick:~/Documents/dev/personal/learning_path/devops/gupta_docker/docker-for-java-master/chap

Building a DOcker image
To build a docker image, we use a dockerfile which contains some steps (started by FROM) to create our image

1. First, you create a diorectory where the image would be built
2. THen you create a file named 'Dockerfile'. This file contains the steps/instructions you want docker to use in buidling your image.
> Steps/instructions in Dockerfile include

# FROM - this is always the first step. It tells docker which base image to pull form. Typically we pull from an existing image to creat our own image

# CMD - docker containers run only one thing which they run really well. This is what we specofy in the CMD step. We specify what we want this image container(s) to run
example of CMD command:

CMD java -jar jarfile
CMD echo "hello world"

# RUN - CMD is often confused with RUN most times. RUN is used to install software packages not commands that we want docker to run on our container. Run can also be used to execute bash script
example of RUN command:

RUN sudo apt-get update && apt-get install -y git
RUN /opt/jboss/wildfly/bin/add-user.sh admin Admin#007 - silent

# COPY - docker copies new files or directoires from the host to the continaer filesystem

# ADD - does what COPY does but in addition does file auto-extraciton in the image

#ENTRYPOINT - configures the container executable; can be overriden using --entrypoint from CLI
Each docker contianer when they start, use an entrypoint. The default entrypoint is:
/bin/sh -c
This can be overriden with the ENTRYPOINT command, you give it a script to run e.g

ENTRYPOINT ["/entrypoint.sh"]

# EXPOSE network ports on which the container is listening. Let's say you are building an application. And you are publishing an API on a certain port, you need to expose the port.
THis makes the container functionality be accessible via this port

E.g 
EXPOSE 9090

EXPOSE only exposes the port from the container. But at runtime, you still need to specify either -P or -p localhostport:continerport to publish the host port

# VOLUME: creates a mount point with the specified name/directory
e.g 
VOLUME /opt/couchbase/var

The VOULUME command lets us know which path in the image to mount data/volumes from the host to. This is what we use when we do
docker run --name my_container -v `pwd`/files_to_mount/:/opt/couchabse/var

# USER: sets the username or UID  to use when running the image

# HEALTHCHECK: performs a healthceck on the application inside the container
This is very important comand because a container returning "up for 1 hours" may be having erros. This is because the container maybe up but the application within it may be malfunctioning
e.g 

HEALTHCHECK --interval=5s --timeout=3s CMD curl --fail http://localhost:8091/pools || exit 1

The above command tells docker to perform an healthcheck every 5 seconds (--interval=5s) and timeout in 3 seconds. This means if in 3 seconds, if it does not return a result, mark the container as unhealthy. So what command does it needs to run if the container is unhealthy, we say ping the provided url (rest api), ping that api and make sure the databse pools are available and if it fails, exit with status code of 1

3. After creating the Dockerfile, we build the image with the following command

IN: docker build -t <imagename:imagetag> <path of Dockerfile or use . if it is int he CWD>

OUT: 
Sending build context to Docker daemon  2.048kB
Step 1/2 : FROM ubuntu
latest: Pulling from library/ubuntu
6a5697faee43: Pull complete 
ba13d3bc422b: Pull complete 
a254829d9e55: Pull complete 
Digest: sha256:fff16eea1a8ae92867721d90c59a75652ea66d29c05294e6e2f898704bdb8cf1
Status: Downloaded newer image for ubuntu:latest
 ---> d70eaf7277ea
Step 2/2 : CMD echo "hello world"
 ---> Running in 6636a271271e
Removing intermediate container 6636a271271e
 ---> 83acd232dd3c
Successfully built 83acd232dd3c
Successfully tagged helloworld:latest

By default, if we do not specify a tag for our image, Docker uses the latest tag

4. You can also specify a .dockerignore file to ignore files you dont' want to be added to your image from the directory where the Dockerfile is located


5. Now we can run a simlple container from the image we just built.

IN: docker run --name <container_name> <image_name>

>docker history <image_name> - this gives us the histroy of an image

When building an image, there are several oither tags we can add to the build command, e.g;

> --compress : to compress files from the build context/directory and send to the host in a gzip format


The alpine tag helps us to pull images version with lower size. alpine tags are smaller in size than toher tags expecoally latest tags


To add a java project (jar/war) to our images, we can use the COPY in our dockerfile.
So we will specify the name of the file to be copied inside the directory we are creating the image and the specify the location in the image(base image) we want it to be located

e.g 

FROM jboss/wildfly

COPY webapp.war /opt/jboss/wildfly/standlaone/deployments/webapp.war

Note that, there is no CMD in the Dockerfile above. This is becuase in cases of multiple dockerfiles intheriting from each other, only one CMD will everb effective. The child Dockerfile CMD overrides the parent CMD. Also if we have multiple CMD in one DOckerfile, only the last CMD will be effective

FROM openjdk:jdk-alpine

CMD java -version

COPY myapp/target/myapp-1.0-SNAPSHOT.jar /deployments/

CMD java -jar /deployments/myapp-1.0-SNAPSHOT.jar

after building an image from the Dockerfile above and run a contiainer from it, we would get an oputput of "helloworld!". THis means the docker ran the jar file which we specified in the CMD command


IN: sudo docker build -t hellojava:3 .

IN: sudo docker run --name hellojava_3 hellojava:3

out: Hello World!

Tags are used for versioning pur docker images. So for example, we can werite our program to print rather "Howdy World !" and rebuild the image but this time using a tag of 4 i.e helloworld:4 and run a container from this new image


DOckerizing java-Maven APp

observe below

<profiles>
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.20.1</version>
                        <configuration>
                            <images>
                                <image>
                                    <name>hellojava</name>
                                    <build>
                                        <from>openjdk:latest</from>
                                        <assembly>
                                            <descriptorRef>artifact</descriptorRef>
                                        </assembly>
                                        <cmd>java -jar maven/${project.name}-${project.version}.jar</cmd>
                                    </build>
                                    <run>
                                        <wait>
                                            <log>Hello World!</log>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>docker:build</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>docker:start</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                    <goal>logs</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>dcos</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>dcos</groupId>
                        <artifactId>dcos-maven-plugin</artifactId>
                        <version>0.2</version>
                        <configuration>
                            <dcosUrl>http://DCOS-ElasticLoadBa-OG73USRXKTX-912507967.us-west-1.elb.amazonaws.com/</dcosUrl>
                            <deployable>group</deployable>
                            <ignoreSslCertificate>true</ignoreSslCertificate>
                        </configuration>
                        <executions>
                            <execution>
                                <id>dcos:deploy</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>deploy</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin> 
                </plugins>
            </build>
        </profile>
    </profiles>
    
    
We can tag a particular image to the latest tag. By default, docker uses the latest tag when availabel and when we do not specify the tag version.

docker image tag helloworld:2 helloworld:latest

What we did here is that we took an existing image called helloworld:2 and tag it to a new image with the same name but with latest tag.
So essentially, we are making this docker image version (tag) as the latest tag

Pushing our image to docker hub

running docker image push helloworld:latest will throw up errors. This is becuase you cannot push a docker image without a namespace, here our url namespace is out docker username

SO to correct that, we do something like

> docker tag helloworld:3 patrick5455/helloworld:latest

> docker login

> docker psuh patrick5455/helloworld:latest

With the above 3 steps, we are able to push our latest image succesfully to our public docker registry

